# Production Dockerfile for dt.visuals
FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    curl \
    bash \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S dtvisuals -u 1001 -G nodejs

FROM base AS builder

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install all dependencies (including devDependencies for build)
RUN npm ci --include=dev && npm cache clean --force

# Copy source code
COPY . .

# Build the application
RUN npm run build

FROM base AS production

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --omit=dev && \
    npm cache clean --force && \
    rm -rf /tmp/*

# Copy built application from builder stage with proper ownership
COPY --from=builder --chown=dtvisuals:nodejs /app/dist ./dist
COPY --from=builder --chown=dtvisuals:nodejs /app/shared ./shared

# Copy any other necessary files
COPY --from=builder --chown=dtvisuals:nodejs /app/migrations ./migrations

# Create uploads directory with proper ownership (only what we need)
RUN mkdir -p uploads && \
    chown dtvisuals:nodejs uploads && \
    chmod 755 uploads

# Change to non-root user
USER dtvisuals

# Expose production port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Create startup script for production (before changing user)
RUN echo '#!/bin/sh\nset -e\necho "Running database migrations..."\nnpm run db:push || echo "Migration failed, continuing..."\necho "Starting application..."\nexec npm start' > /app/start.sh && \
    chmod +x /app/start.sh && \
    chown dtvisuals:nodejs /app/start.sh

# Production command with migrations
CMD ["/app/start.sh"]