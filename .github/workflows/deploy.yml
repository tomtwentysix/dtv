name: Deploy DT Visuals

on:
  push:
    branches:
      - main    # Production deployment
      - dev     # Development deployment
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: |
        npm run build
        
    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "pm2_app=dtvisuals-prod" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "pm2_app=dtvisuals-dev" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          set -e
          
          ENV="${{ steps.env.outputs.environment }}"
          PM2_APP="${{ steps.env.outputs.pm2_app }}"
          
          echo "=== Deploying DT Visuals ($ENV) ==="
          
          # Navigate to app directory
          cd /var/www/dtvisuals/app
          
          # Backup current version
          echo "📦 Creating backup..."
          sudo -u dtvisuals cp -r /var/www/dtvisuals/app /var/www/dtvisuals/app.backup.$(date +%Y%m%d-%H%M%S) || true
          
          # Pull latest code
          echo "📥 Pulling latest code..."
          sudo -u dtvisuals git fetch origin
          sudo -u dtvisuals git reset --hard origin/${{ github.ref_name }}
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          sudo -u dtvisuals npm ci --production
          
          # Build application
          echo "🔨 Building application..."
          sudo -u dtvisuals npm run build
          
          # Run database migrations
          echo "🗃️  Running database migrations..."
          if [[ "$ENV" == "prod" ]]; then
            sudo -u dtvisuals NODE_ENV=production npx drizzle-kit migrate
          else
            sudo -u dtvisuals NODE_ENV=development npx drizzle-kit migrate
          fi
          
          # Restart PM2 application
          echo "🔄 Restarting application..."
          sudo -u dtvisuals pm2 restart $PM2_APP || sudo -u dtvisuals pm2 start ecosystem.config.js --only $PM2_APP
          
          # Wait for app to be ready
          echo "⏳ Waiting for application to be ready..."
          sleep 10
          
          # Health check
          if [[ "$ENV" == "prod" ]]; then
            PORT=5001
          else
            PORT=5002
          fi
          
          if curl -f http://localhost:$PORT/api/health > /dev/null 2>&1; then
            echo "✅ Application is healthy"
          else
            echo "⚠️  Health check failed, but deployment completed"
          fi
          
          # Show PM2 status
          echo "📊 PM2 Status:"
          sudo -u dtvisuals pm2 list
          
          echo "✅ Deployment completed successfully!"
          
    - name: Notify deployment status
      if: always()
      run: |
        ENV="${{ steps.env.outputs.environment }}"
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "✅ Successfully deployed to $ENV environment"
        else
          echo "❌ Deployment to $ENV environment failed"
        fi