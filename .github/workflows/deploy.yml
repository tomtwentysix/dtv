name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/dtv:prod-latest
          ghcr.io/${{ github.repository_owner }}/dtv:prod-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/dtv:dev-latest
          ghcr.io/${{ github.repository_owner }}/dtv:dev-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Navigate to deployment directory
          cd /opt/dt-visuals
          
          # Fix Docker rootless port permissions
          if ! sudo sysctl net.ipv4.ip_unprivileged_port_start | grep -q "= 80"; then
            echo "net.ipv4.ip_unprivileged_port_start=80" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p
          fi
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          docker pull ghcr.io/${{ github.repository_owner }}/dtv:prod-latest
          docker pull ghcr.io/${{ github.repository_owner }}/dtv:dev-latest
          
          # Update docker-compose with new images
          docker-compose down
          docker-compose up -d
          
          # Clean up old images
          docker image prune -f