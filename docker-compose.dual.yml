version: '3.8'

services:
  # Nginx reverse proxy for SNI routing
  nginx:
    image: nginx:alpine
    container_name: dt-visuals-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-startup.sh:/nginx-startup.sh:ro
      - ./ssl:/etc/nginx/ssl:ro
      - certbot-www:/var/www/certbot:ro
      - certbot-conf:/etc/letsencrypt:ro
    command: ["sh", "/nginx-startup.sh"]
    depends_on:
      app-prod:
        condition: service_healthy
      app-dev:
        condition: service_healthy
    networks:
      - dt-visuals-network

  # Production App
  app-prod:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/dtv:prod-latest
    container_name: dt-visuals-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://dtvisuals:${PROD_DB_PASSWORD}@db-prod:5432/dt_visuals_prod
      - SESSION_SECRET=${PROD_SESSION_SECRET}
      - DOCKER_ENV=true
      - PORT=5000
      - HOST=0.0.0.0
    volumes:
      - uploads-prod:/app/uploads
    networks:
      - dt-visuals-network
    depends_on:
      db-prod:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development App
  app-dev:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/dtv:dev-latest
    container_name: dt-visuals-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://dtvisuals:${DEV_DB_PASSWORD}@db-dev:5432/dt_visuals_dev
      - SESSION_SECRET=${DEV_SESSION_SECRET}
      - DOCKER_ENV=true
      - PORT=5000
      - HOST=0.0.0.0
    volumes:
      - uploads-dev:/app/uploads
    networks:
      - dt-visuals-network
    depends_on:
      db-dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production Database
  db-prod:
    image: postgres:15-alpine
    container_name: dt-visuals-db-prod
    restart: unless-stopped
    ports:
      - "0.0.0.0:5433:5432"  # External port 5433 -> Internal port 5432
    environment:
      - POSTGRES_DB=dt_visuals_prod
      - POSTGRES_USER=dtvisuals
      - POSTGRES_PASSWORD=${PROD_DB_PASSWORD}
    volumes:
      - db-prod-data:/var/lib/postgresql/data
    networks:
      - dt-visuals-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dtvisuals -d dt_visuals_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development Database
  db-dev:
    image: postgres:15-alpine
    container_name: dt-visuals-db-dev
    restart: unless-stopped
    ports:
      - "0.0.0.0:5434:5432"  # External port 5434 -> Internal port 5432
    environment:
      - POSTGRES_DB=dt_visuals_dev
      - POSTGRES_USER=dtvisuals
      - POSTGRES_PASSWORD=${DEV_DB_PASSWORD}
    volumes:
      - db-dev-data:/var/lib/postgresql/data
    networks:
      - dt-visuals-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dtvisuals -d dt_visuals_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for Let's Encrypt SSL
  certbot:
    image: certbot/certbot
    container_name: dt-visuals-certbot
    volumes:
      - certbot-www:/var/www/certbot
      - certbot-conf:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${ACME_EMAIL} --agree-tos --no-eff-email -d dtvisuals.com -d dev.dtvisuals.com
    depends_on:
      - nginx

volumes:
  uploads-prod:
    driver: local
    name: dt-visuals-uploads-prod
  uploads-dev:
    driver: local
    name: dt-visuals-uploads-dev
  db-prod-data:
    driver: local
    name: dt-visuals-db-prod
  db-dev-data:
    driver: local
    name: dt-visuals-db-dev
  certbot-www:
    driver: local
  certbot-conf:
    driver: local

networks:
  dt-visuals-network:
    driver: bridge